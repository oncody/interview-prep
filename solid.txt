SOLID software design principles
  Single responsibility principle
    Modules, classes, and functions should only have a single responsibility. They should only have a single reason to change.
  Open-closed principle
    Modules, classes, and functions should be open for extension, but closed for modification. You can accomplish this with interfaces and inheritance.
  Liskov substitution principle
    All sub-types must fully implement all contracts. All objects must be able to be replaced with instances of their subtype without altering the correctness of the program.
  Interface Segregation Principle
    Favor many small client-specific interfaces over one large general-purpose interface
  Dependency Inversion Principle
    High-level modules should not depend on low-level modules. Both Should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions. High-level client modules create the interface they need and lower-level modules implement that interface.
